<?xml version="1.0" encoding="UTF-8"?>
<?include ..\version.xml ?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
  <!-- UpgradeCode must not change, ProductCode and version should change each build (Id="*") unless creating a patch: then use ProductCode from the base release -->
  <Product Id="*" Name="Keybase Apps" Language="1033" Version="$(env.KEYBASE_INSTALLER_WINVER)" Manufacturer="Keybase, Inc." UpgradeCode="$(var.KeybaseUpgradeCode)">
		<Package InstallerVersion="500" Compressed="yes" InstallPrivileges="limited" InstallScope="perUser" />
    <MediaTemplate EmbedCab="yes"/>
    <Icon Id="ProductIcon" SourceFile="$(env.GOPATH)\src\github.com\keybase\client\media\icons\Keybase.ico"/>
    <Property Id="ARPPRODUCTICON" Value="ProductIcon"/>
    <Property Id="ARPHELPLINK" Value="https://www.keybase.io"/>
    <Property Id="ARPURLINFOABOUT" Value="https://www.keybase.io"/>

    <!--Keybase msi version KEYBASE_INSTALLER_WINVER is in the form 1.0.18600 so capture the semantic version in a property-->
    <Property Id="SEMANTICVERSION" Value="$(env.SEMVER)"/>    
    
    <Feature Id="ProductFeature" Title="Keybase Application" Level="1">
      <ComponentGroupRef Id="ProductComponents" />
      <ComponentGroupRef Id="ProductUpdater" />
      <ComponentGroupRef Id="PrompterComponents" />      
      <ComponentGroupRef Id="GUI" />
      <ComponentGroupRef Id="ApplicationShortcuts" />
    </Feature>

    <FeatureRef Id="KBFSFeature" />
        
    <!-- This seems to be the best way to detect pending reboot - MsiSystemRebootPending did NOT work -->
    <Property Id="RESTART_PENDING">
      <RegistrySearch Id="RestartPending"
                      Root="HKLM"
                      Key="SYSTEM\CurrentControlSet\Control\Session Manager"
                      Name="PendingFileRenameOperations"
                      Type="raw" />
    </Property>
    
    <!--Check installer property WIX_UPGRADE_DETECTED or UPGRADINGPRODUCTCODE to see if an upgrade is in progrss-->
    <MajorUpgrade DowngradeErrorMessage="A newer version of Keybase is already installed."/>

    <Directory Id="TARGETDIR" Name="SourceDir">
      <!--Typically C:\Users\USERNAME\AppData\Local-->
      <Directory Id="LocalAppDataFolder">
        <Directory Id="INSTALLFOLDER" Name="Keybase">
          <Directory Id="PROMPTERFOLDER" Name="prompter"/>
        </Directory>
      </Directory>
      <Directory Id="ProgramMenuFolder">
        <Directory Id="APPLICATIONPROGRAMSLFOLDER" Name="Keybase"/>
      </Directory>
      <!--The 32bit system folder typically C:\Windows\SysWow64 on x64, and C:\Windows\System32 on x86-->
      <Directory Id="SystemFolder" Name="System" />
      <!--The "old installer" Keybase has files in Roaming-->
      <Directory Id="AppDataFolder">
        <Directory Id="ROAMINGINSTALLFOLDER" Name="Keybase">
        </Directory>
      </Directory>
    </Directory>

    <InstallExecuteSequence>
      <InstallValidate Suppress="yes">FAKE_PROPERTY</InstallValidate>

      <!--See Fragment sections for actions specific to those components-->
    </InstallExecuteSequence>

    <Property Id="Setup">Setup</Property>
    <Property Id="ButtonText_No">&amp;No</Property>
    <Property Id="ButtonText_Yes">&amp;Yes</Property>
    <Property Id="ButtonText_Install">&amp;Install</Property>
    <Property Id="ButtonText_Cancel">Cancel</Property>
    <Property Id="BannerBitmap">bannrbmp</Property>
    <Property Id="Wizard">Setup Wizard</Property>
    <Property Id="InfoIcon">info</Property>

    <Binary Id="info" SourceFile="Binary\Info.ico" />
    <Binary Id="bannrbmp" SourceFile="Binary\Banner.bmp" />
  </Product>
  
	<Fragment>
		<ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
			<Component Id="keybase.exe" Guid="88737432-0E15-413D-B23C-4B18D06EDC2C">				
        <CreateFolder />
        <RemoveFolder Id="RemoveMyApp" On="uninstall" />
        <!-- The heat tool output (which generates gui.wxs) won't work if there are directories with only subdirectories
        and no removable components, so we have to special-case them here and in the xsl transform (gui.xsl) -->
        <RemoveFolder Id="GuiResourcesDirRemove" On="uninstall" Directory="GuiResourcesDir"/>
        <RemoveFolder Id="GuiSharedDirRemove" On="uninstall" Directory="GuiSharedDir"/>
        <RemoveFolder Id="ROAMINGINSTALLFOLDERRemove" On="uninstall" Property="ROAMINGINSTALLFOLDER"/> <!--Clean up in old location when we install. TODO eventually remove this--><!--This entry is to avoid ICE64 error-->
        <RemoveFile Id="RemoveServiceLog" Name="keybase.service.log" On="uninstall"/>
        <RemoveFile Id="RemoveRoamingServiceLog" Name="keybase.service.log" Directory="ROAMINGINSTALLFOLDER" On="install"/> <!--Clean up in old location when we install. TODO eventually remove this-->
        <RemoveFile Id="RemoveAppLog" Name="keybase.app.log" On="uninstall"/>
        <RemoveFile Id="RemoveRoamingAppLog" Name="keybase.app.log" Directory="ROAMINGINSTALLFOLDER" On="both"/> <!--TODO eventually remove this when GUI writes to LocalAppDataFolder/Keybase-->
        <RegistryKey Root="HKCU" Key="Software\Keybase\Keybase">
          <RegistryValue Name="KeybaseExe" Value="1" KeyPath="yes" Type="integer" />
        </RegistryKey>
        <File Id="keybase.exe" Source="$(env.GOPATH)\src\github.com\keybase\client\go\keybase\keybase.exe" Checksum="yes"/>
      </Component>

      <!--Start the application on user logon
      TODO Add the Keybase icon/description to runquiet.exe binary and possibly rename runquiet. It would look better in taskmgr->Startup pane.
      TODO These must be disabled/deleted if there is an interim reboot between upgrading Dokan and upgrading Keybase Apps -->
      <Component Id="AppRunKeyComponent" Guid="{B0F58F8C-A2F0-483F-8193-E4E254B7779F}">
        <RegistryValue Root="HKCU" Key="SOFTWARE\Microsoft\Windows\CurrentVersion\Run" Name="Keybase" Value="&quot;[#runquiet.exe]&quot; &quot;[#keybase.exe]&quot; ctl watchdog2" Type="string" />
      </Component>

      <Component Id="runquiet.exe" Guid="{1265F74B-0775-4522-A67D-25422D1984A3}">
        <CreateFolder />
        <RemoveFolder Id="RemoveMyAppRunner" On="uninstall" />
        <RegistryKey Root="HKCU" Key="Software\Keybase\Keybase">
          <RegistryValue Name="runquietexe" Value="1" KeyPath="yes" Type="integer" />
        </RegistryKey>
        <File Id="runquiet.exe" Source="$(env.GOPATH)\src\github.com\keybase\client\go\tools\runquiet\runquiet.exe" Checksum="yes"/>
      </Component>
    </ComponentGroup>

    <InstallExecuteSequence>
      <!--Stop actions are conditioned to run only if the product is already Installed 
      These should only run when servicing (repair/modify/uninstall). 
      Note that this version is not considered installed when upgrading and thus will not run. The old version of Keybase on the system handles stopping as part of it's uninstall-->   
      <Custom Action="StopMainApp" Before="StopGUI"><![CDATA[Installed]]></Custom>
      <!--TODO Stop Keybase command line since prompt will typically be in the install directory-->

      <Custom Action="RunMainAppDummyForRepair" Before="RunMainApp"><![CDATA[NOT (RESTART_PENDING >< "Dokan") AND NOT (REMOVE ~= "ALL")]]></Custom>

      <!--This These should run only if there is not a restart pending after install or upgrade-->
      <Custom Action="RunMainApp" Before="InstallFinalize"><![CDATA[NOT (RESTART_PENDING >< "Dokan") AND NOT (REMOVE ~= "ALL")]]></Custom>
    </InstallExecuteSequence>

    <CustomAction Id="RunMainApp"
              FileKey="runquiet.exe"
              ExeCommand="&quot;[#keybase.exe]&quot; ctl watchdog2"
              Execute="commit"
              Impersonate="yes"
              Return="asyncNoWait"/>

    <!-- This has to be run so the repairman can finish moving files before upd.exe is run by watchdog2 -->
    <CustomAction Id="RunMainAppDummyForRepair"
              Directory="INSTALLFOLDER"
              ExeCommand="[INSTALLFOLDER]runquiet.exe -wait &quot;[INSTALLFOLDER]keybase.exe&quot; --standalone ping"
              Execute="commit"
              Return="ignore"/>

    <CustomAction Id="StopMainApp"
              Directory="INSTALLFOLDER"
              ExeCommand="[INSTALLFOLDER]runquiet.exe -wait &quot;[INSTALLFOLDER]keybase.exe&quot; ctl stop --kill-kbfs"
              Execute="immediate"
              Return="ignore"/>
  </Fragment>

  <Fragment>
    <ComponentGroup Id="GUI" Directory="INSTALLFOLDER" >     
      <ComponentGroupRef Id="GuiComponents" />

      <!--Start the  GUI on user logon
      TODO Verify that GUI\Keybase.exe can be run "raw" vs with runquit. Raw looks better in taskmgr->Startup pane.
      TODO These must be disabled/deleted if there is an interim reboot between upgrading Dokan and upgrading Keybase Apps -->
      <Component Id="GUIRunKeyComponent" Guid="{117D9139-9E66-4BDB-B5BF-F7F508F27BDC}">
        <RegistryValue Root="HKCU" Key="SOFTWARE\Microsoft\Windows\CurrentVersion\Run" Name="KeybaseGUI" Value="&quot;[#KeybaseGUI]&quot;" Type="string" />
      </Component>
    </ComponentGroup>

    <InstallExecuteSequence>
      <!--Stop actions are conditioned to run only if the product is already Installed 
      This should only run when servicing (repair/modify/uninstall). 
      Note that this version is not considered installed when upgrading and thus will not run. The old version of Keybase on the system handles stopping as part of it's uninstall-->
      <Custom Action="StopGUI" Before="InstallValidate"><![CDATA[Installed]]></Custom>

      <!--TODO This should run only if there is not a restart pending after install or upgrade from either Dokan or Keybase.-->
      <Custom Action="RunGUI" Before="InstallFinalize"><![CDATA[NOT (RESTART_PENDING >< "Dokan") AND NOT (REMOVE ~= "ALL")]]></Custom>
    </InstallExecuteSequence>    
    
    <CustomAction Id="RunGUI"
              FileKey="KeybaseGUI"
              ExeCommand=""
              Execute="commit"
              Impersonate="yes"
              Return="asyncNoWait"/>

    <CustomAction Id="StopGUI"
              Directory="INSTALLFOLDER"
              ExeCommand="[INSTALLFOLDER]runquiet.exe -wait [WindowsFolder]\System32\taskkill.exe /F /IM Keybase.exe"
              Execute="immediate"
              Return="ignore"/>    
  </Fragment>

  <Fragment>
    <ComponentGroup Id="ProductUpdater" Directory="INSTALLFOLDER">
      <Component Id="upd.exe" Guid="{65C18DA3-BCD5-4E18-9C80-AC66471B433A}">
        <CreateFolder />
        <RemoveFolder Id="RemoveUpdater" On="uninstall" />
        <RemoveFile Id="RemoveRoamingUpdaterLog" Name="keybase.updater.log" Directory="ROAMINGINSTALLFOLDER" On="install"/> <!--Clean up in old location when we install. TODO eventually remove this-->
        <RegistryKey Root="HKCU" Key="Software\Keybase\Keybase">
          <RegistryValue Name="updaterexe" Value="1" KeyPath="yes" Type="integer" />
        </RegistryKey>
        <File Id="upd.exe" Source="$(env.GOPATH)\src\github.com\keybase\go-updater\service\upd.exe" Checksum="yes"/>
      </Component>      
    </ComponentGroup>

    <InstallExecuteSequence>
      <!--Stop actions are conditioned to run only if the product is already Installed 
      These should only run when servicing (repair/modify/uninstall). 
      Note that this version is not considered installed when upgrading and thus will not run. The old version of Keybase on the system handles stopping as part of it's uninstall-->
      <Custom Action="StopUpdater" Before="InstallValidate"><![CDATA[Installed]]></Custom>
    </InstallExecuteSequence>    

    <CustomAction Id="StopUpdater"
              Directory="INSTALLFOLDER"
              ExeCommand="[INSTALLFOLDER]runquiet.exe -wait [WindowsFolder]\System32\taskkill.exe /F /IM upd.exe"
              Execute="immediate"
              Return="ignore"/>
  </Fragment>
  
  <Fragment>
    <ComponentGroup Id="PrompterComponents" Directory="PROMPTERFOLDER">
      <Component Id="prompter.hta" Guid="{424BA879-35A2-4853-8F3D-6D8112655FF6}">
        <CreateFolder />
        <RemoveFolder Id="RemovePrompterHta" On="uninstall" />
        <RegistryKey Root="HKCU" Key="Software\Keybase\Keybase">
          <RegistryValue Name="prompterhta" Value="1" KeyPath="yes" Type="integer" />
        </RegistryKey>
        <File Id="prompter.hta" Source="$(env.GOPATH)\src\github.com\keybase\go-updater\windows\prompter\prompter.hta" Checksum="yes"/>
      </Component>
      
      <Component Id="keybase.ico" Guid="{747ACACB-5F0E-4979-AFA8-6C6401481C19}">
        <CreateFolder />
        <RemoveFolder Id="RemovePrompterKeybaseIco" On="uninstall" />
        <RegistryKey Root="HKCU" Key="Software\Keybase\Keybase">
          <RegistryValue Name="prompterkbicon" Value="1" KeyPath="yes" Type="integer" />
        </RegistryKey>
        <File Id="keybase.ico" Source="$(env.GOPATH)\src\github.com\keybase\go-updater\windows\prompter\keybase.ico" Checksum="yes"/>
      </Component>
      
      <Component Id="keybase.png" Guid="{FC444587-2B9D-4E7D-A926-F0BC5A239F42}">
        <CreateFolder />
        <RemoveFolder Id="RemovePrompterKeybasePng" On="uninstall" />
        <RegistryKey Root="HKCU" Key="Software\Keybase\Keybase">
          <RegistryValue Name="prompterkbpng" Value="1" KeyPath="yes" Type="integer" />
        </RegistryKey>
        <File Id="icon_128x128.png" Source="$(env.GOPATH)\src\github.com\keybase\go-updater\windows\prompter\icon_128x128.png" Checksum="yes"/>
      </Component>
    </ComponentGroup>
  </Fragment>

  <Fragment>
    <ComponentGroup Id="ApplicationShortcuts" Directory="APPLICATIONPROGRAMSLFOLDER" >
      <Component Id="ApplicationShortcut" Guid="E05F8D29-F530-4791-AE6B-B89DAE1F6D5C" >
          <Shortcut Id="ApplicationStartMenuShortcut"
              Name="Keybase Shell"
              Description="Open command console with keybase in the local path"
              Target="[SystemFolder]cmd.exe"
              Arguments="/K &quot;set PATH=%PATH%;[INSTALLFOLDER]&quot;"
              WorkingDirectory="INSTALLFOLDER"      
              Icon="ProductIcon"/>
          <RemoveFolder Id="APPLICATIONPROGRAMSLFOLDER" On="uninstall"/>
          <RegistryValue Root="HKCU" Key="Software\Keybase\Keybase" Name="installed" Type="integer" Value="1" KeyPath="yes"/>
      </Component>
      
      <Component Id="GUIShortCutComponent" Guid="{1DCD73F4-1129-409E-9D8B-42F2BAD26867}">
        <Shortcut Id="GUIShortCut"
                  Name="Keybase"
                  Description="Start GUI"
                  Target="[#KeybaseGUI]"
                  WorkingDirectory="GuiDir"/>
        <RegistryKey Root="HKCU" Key="Software\Keybase\Keybase">
          <RegistryValue Name="ShortCutGUI" Type="integer" Value="1" KeyPath="yes"  />
        </RegistryKey>
      </Component>
    </ComponentGroup>
  </Fragment>

  <Fragment>
    <!--KBFS as a separate feature so it can be optional 
    Set Level to a larger value to make it unselected by default-->
    <Feature Id="KBFSFeature" Title="Keybase File System" Level="1">
      <ComponentGroupRef Id="KBFSComponents" />
    </Feature>
    
    <ComponentGroup Id="KBFSComponents" Directory="INSTALLFOLDER">
      <Component Id="KbfsDokanExe" Guid="{98A16FB9-D314-495A-806C-B75DCB74CF9D}">
        <CreateFolder />
        <RemoveFolder Id="RemoveDokan" On="uninstall" />
        <RemoveFile Id="RemoveKBFSLog" Name="keybase.kbfs.log" On="uninstall"/>
        <RemoveFile Id="RemoveRoamingKBFSLog" Name="keybase.kbfs.log" Directory="ROAMINGINSTALLFOLDER" On="install"/> <!--Clean up in old location when we install. TODO eventually remove this-->
        <RegistryKey Root="HKCU" Key="Software\Keybase\Keybase">
          <RegistryValue Name="KbfsDokanExe" Value="1" KeyPath="yes" Type="integer" />
        </RegistryKey>
        <File Id='KbfsDokanExe' DiskId='1' Source="$(env.GOPATH)\src\github.com\keybase\kbfs\kbfsdokan\kbfsdokan.exe" />
      </Component>
    </ComponentGroup>
  </Fragment>

  </Wix>
