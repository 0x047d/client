
@namespace("keybase.1")
protocol identifyUi {
	import idl "common.avdl";

	enum TrackDiffType {
		NONE,
		ERROR,
		CLASH,
		DELETED,
		UPGRADED,
		NEW,
		REMOTE_FAIL,
		REMOTE_WORKING,
		REMOTE_CHANGED
	}

	record TrackDiff {
		TrackDiffType type;
		string displayMarkup;
	}

	record ProofStatus {
		int state;
		int status;
		string desc;	
	}

	record RemoteProof {
		int proofType;
		string key;
		string value;
		string displayMarkup;
	}

	record IdentifyRow {
		int rowId;
		RemoteProof proof;
		union { null, TrackDiff } trackDiff;
	}

	record IdentifyKey {
		bytes pgpFingerprint;
		bytes KID;
		union { null, TrackDiff } trackDiff;
	}

	record Cryptocurrency {
		int rowId;
		bytes pkhash;
		string address;
	}

	record Identity {
		Status status;
		int whenLastTracked;
		IdentifyKey key;
		array<IdentifyRow> proofs;
		array<Cryptocurrency> cryptocurrency;
		array<TrackDiff> deleted;
	}

	record SigHint {
		string remoteId;
		string humanUrl;
		string apiUrl;
		string checkText;
	}

	record CheckResult {
		ProofStatus proofStatus;
		int timestamp;
		string displayMarkup;
	}

	record LinkCheckResult {
		int proofId;
		ProofStatus proofStatus;	
		union { null, CheckResult } cached;
		union { null, TrackDiff } diff;
		union { null, TrackDiff } remoteDiff;
		union { null, SigHint } hint;
	}

	record TrackSummary {
		int time;	
		boolean isRemote;
	}

	record IdentifyOutcome {
		Status status;
		array<string> warnings;
		union { null, TrackSummary } trackUsed;
		int numTrackFailures;
		int numTrackChanges;
		int numProofFailures;
		int numDeleted;
		int numProofSuccesses;
		array<TrackDiff> deleted;
	}

	record FinishAndPromptRes {
		Status status;
		boolean trackLocal;
		boolean trackRemote;
	}

	FinishAndPromptRes finishAndPrompt(int sessionId, IdentifyOutcome outcome);
	Status finishWebProofCheck(int sessionId, RemoteProof rp, LinkCheckResult lcr);
	Status finishSocialProofCheck(int sessionId, RemoteProof rp, LinkCheckResult lcr);
	Status displayCryptocurrency(int sessionId, Cryptocurrency c);
	Status displayKey(int sessionId, FOKID fokid, union { null, TrackDiff } diff);
	Status reportLastTrack(int sessionId, union { null, TrackSummary } track);
	Status launchNetworkChecks(int sessionId, Identity id);
}